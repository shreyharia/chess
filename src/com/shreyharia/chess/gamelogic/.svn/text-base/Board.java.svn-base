package com.shreyharia.chess.gamelogic;

import java.util.HashMap;
import java.util.Map;

import com.shreyharia.chess.gamelogic.pieces.*;
import java.util.HashSet;
import java.util.Set;

public class Board {

    private Map<String, Tile> tiles = new HashMap<String, Tile>();
    private boolean turn = true;
    Board() {
        for (int rank = 1; rank <= 8; rank++) {
            for (char file = 'a'; file <= 'h'; file++) {
                tiles.put("" + file + "" + rank, new Tile(file,rank));
            }
        }
        populate();
    }

    private void populate(){
        tiles.get("a1").setPiece(new Rook(true));
        tiles.get("h1").setPiece(new Rook(true));
        tiles.get("a8").setPiece(new Rook(false));
        tiles.get("h8").setPiece(new Rook(false));

        tiles.get("b1").setPiece(new Knight(true));
        tiles.get("g1").setPiece(new Knight(true));
        tiles.get("b8").setPiece(new Knight(false));
        tiles.get("g8").setPiece(new Knight(false));

        tiles.get("c1").setPiece(new Bishop(true));
        tiles.get("f1").setPiece(new Bishop(true));
        tiles.get("c8").setPiece(new Bishop(false));
        tiles.get("f8").setPiece(new Bishop(false));

        tiles.get("d1").setPiece(new Queen(true));
        tiles.get("e1").setPiece(new King(true));
        tiles.get("d8").setPiece(new Queen(false));
        tiles.get("e8").setPiece(new King(false));

        for(char file = 'a';file <= 'h';file++){
            tiles.get(""+file+""+2).setPiece(new Pawn(true));
            tiles.get(""+file+""+7).setPiece(new Pawn(false));
        }
    }

    public Set<Tile> move(String msg){
        String t1 = msg.substring(1, 3);
        String t2 = msg.substring(5, 7);
        Set<Tile> updatedtiles = new HashSet<Tile>();
        if(isObstacle(msg)){
        	
        	//if move is valid, move pieces and flip the boolean turn
        turn = !turn;	
         Tile tile1 = tiles.get(t1);
         Tile tile2 = tiles.get(t2);
         tile2.setPiece(tile1.getPiece());
         tile1.setPiece(null);
        updatedtiles.add(tile1);
        updatedtiles.add(tile2);
        }
        return updatedtiles;
    }

    private boolean isObstacle(String msg){
        char f1 = msg.charAt(1);
        char r1 = msg.charAt(2);
        char f2 = msg.charAt(5);
        char r2 = msg.charAt(6);

        String t1 = msg.substring(1, 3);
        String t2 = msg.substring(5, 7);
        if(f1 == f2){
            return true;
        }
        else if(Math.abs(r2 - r1) == Math.abs(f2 - f1)){
            return true;
        }
        return false;
    }

    public Map<String, Tile> getTiles() {
        return tiles;
    }

    public boolean getTurn(){
    	return turn;
    }
}
